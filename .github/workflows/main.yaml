name: Apply

on:
  workflow_dispatch:
    branches:
      - main

jobs:

  apply_and_provision:
    runs-on: ubuntu-latest
    name: Apply terraform and provisioning with Ansible
    steps:
      - name: Checkout
        uses: actions/checkout@v3 
      - uses: webfactory/ssh-agent@v0.7.0
        with:
            ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}    
#      - name: terraform apply
#        uses: dflook/terraform-apply@v1
#        with:
#          path: terraform
#          auto_approve: true
#        env:
#          TF_VAR_avail_zone: ${{ secrets.TF_VAR_AVAIL_ZONE }}
#          TF_VAR_aws_access_key: ${{ secrets.TF_VAR_AWS_ACCESS_KEY }}
#          TF_VAR_aws_secret_key: ${{ secrets.TF_VAR_AWS_SECRET_KEY }}
#          TF_VAR_cidr_blocks: ${{ secrets.TF_VAR_CIDR_BLOCKS }}
#          TF_VAR_env_prefix: ${{ secrets.TF_VAR_ENV_PREFIX }}
#          TF_VAR_instance_type: ${{ secrets.TF_VAR_INSTANCE_TYPE }}
#          TF_VAR_my_ip: ${{ secrets.TF_VAR_MY_IP }}
#          TF_VAR_private_subnet_cidr_blocks: ${{ secrets.TF_VAR_PRIVATE_SUBNET_CIDR_BLOCKS }}
#          TF_VAR_public_key: ${{ secrets.TF_VAR_PUBLIC_KEY }}
#          TF_VAR_public_subnet_cidr_blocks: ${{ secrets.TF_VAR_PUBLIC_SUBNET_CIDR_BLOCKS }}
#          TF_VAR_subnet_cidr_block: ${{ secrets.TF_VAR_SUBNET_CIDR_BLOCK }}
#          TF_VAR_vpc_cidr_block: ${{ secrets.TF_VAR_VPC_CIDR_BLOCK }}
#          TF_VAR_image_name: ${{ secrets.TF_VAR_IMAGE_NAME }} 
#      - name: check files
#        run: "cat ansible/inventory/hosts.yaml"
#      - name: ansible playbook
#        uses: dawidd6/action-ansible-playbook@v2
#        with:
#          playbook: main.yaml
#          directory: ansible
#          key: ${{secrets.SSH_PRIVATE_KEY}}  
#          options: |
#            --inventory inventory/hosts.yaml
      -  name: show file
         run: cat kubernetes/ip.yaml
      -  name: get mongo ip
         id: mongo_ip
         run: export MONGO_IP=$(head -n 1 kubernetes/ip.yaml)
         # >> $GITHUB_OUTPUT     
      -  name: sd mongo ip
         run: echo "${MONGO_IP}"

#  build_iamge_and_push:
#    runs-on: ubuntu-latest
#    name: Build docker Image and Push to DockerHub
#    steps:  
#      - name: Checkout
#        uses: actions/checkout@v3 
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#      - name: Build and push
#        uses: docker/build-push-action@v4
#        with:
#          context: nodeJSApp
#          push: true
#          tags: maluyvova/collection:latest 

  deploy:
    name: deploy to cluster
    runs-on: ubuntu-latest
    needs: apply_and_provision
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TF_VAR_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.TF_VAR_AWS_SECRET_KEY }}
          aws-region: us-west-1
      - name: show mongo ip
        run: |
          export MONGO_IP=${{ needs.apply_and_provision.steps.mongo_ip.outputs.MONGO_IP }}
      - name: show ip
        run: |
          echo ${MONGO_IP}
#      - name: Authenticate with EKS cluster
#        run: aws eks --region us-west-1 update-kubeconfig --name EKS
#      - name: Apply Kubernetes deployment
#        run: kubectl apply -f kubernetes/app.yaml 
#      - name: Apply Kubernetes cluster role
#        run: kubectl apply -f kubernetes/clusterRole.yaml 
#      - name: Apply Kubernetes role binding
#        run: kubectl apply -f kubernetes/rolebinding.yaml 
#      - name: Apply Kubernetes Service Role
#        run: kubectl apply -f kubernetes/serviceAccount.yaml 
#      - name: Apply Kubernetes Config Map
#        run: kubectl apply -f kubernetes/config-map.yaml
#      - name: Kubernetes create namespace
#        run: kubectl create ns monitoring   
#      - name: Add helm Repo for prometheus
#        run: helm repo add prometheus-community https://prometheus-community.github.io/helm-charts   
#      - name: Install helm Repo
#        run: helm install monitoring prometheus-community/kube-prometheus-stack --namespace=monitoring
#      - name: Upgrade Helm 
#        run: helm upgrade monitoring prometheus-community/kube-prometheus-stack --namespace=monitoring --values kubernetes/values.yaml

           
    


          